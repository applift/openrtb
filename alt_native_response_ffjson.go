// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: alt_native_response.go
// DO NOT EDIT!

package openrtb

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *AltNativeAdm) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *AltNativeAdm) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	var err error
	var obj []byte
	_ = obj
	_ = err
	if mj.Native != nil {
		buf.WriteString(`{"Native":`)

		{
			err = mj.Native.MarshalJSONBuf(buf)
			if err != nil {
				return err
			}
		}

	} else {
		buf.WriteString(`{"Native":null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_AltNativeAdmbase = iota
	ffj_t_AltNativeAdmno_such_key

	ffj_t_AltNativeAdm_Native
)

var ffj_key_AltNativeAdm_Native = []byte("Native")

func (uj *AltNativeAdm) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *AltNativeAdm) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_AltNativeAdmbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_AltNativeAdmno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'N':

					if bytes.Equal(ffj_key_AltNativeAdm_Native, kn) {
						currentKey = ffj_t_AltNativeAdm_Native
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_AltNativeAdm_Native, kn) {
					currentKey = ffj_t_AltNativeAdm_Native
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_AltNativeAdmno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_AltNativeAdm_Native:
					goto handle_Native

				case ffj_t_AltNativeAdmno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Native:

	/* handler: uj.Native type=openrtb.AltNativeResponse kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.Native = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.Native == nil {
			uj.Native = new(AltNativeResponse)
		}

		err = uj.Native.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}

func (mj *AltNativeResponse) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *AltNativeResponse) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.Ver != 0 {
		buf.WriteString(`"ver":`)
		fflib.FormatBits2(buf, uint64(mj.Ver), 10, mj.Ver < 0)
		buf.WriteByte(',')
	}
	buf.WriteString(`"assets":`)
	if mj.Assets != nil {
		buf.WriteString(`[`)
		for i, v := range mj.Assets {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Struct fall back. type=openrtb.ResponseAsset kind=struct */
			err = buf.Encode(&v)
			if err != nil {
				return err
			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	if mj.Link != nil {
		/* Struct fall back. type=openrtb.Link kind=struct */
		buf.WriteString(`,"link":`)
		err = buf.Encode(mj.Link)
		if err != nil {
			return err
		}
	} else {
		buf.WriteString(`,"link":null`)
	}
	buf.WriteByte(',')
	if len(mj.Imptrackers) != 0 {
		buf.WriteString(`"imptrackers":`)
		if mj.Imptrackers != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Imptrackers {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	buf.WriteString(`"jstracker":`)
	fflib.WriteJsonString(buf, string(mj.Jstracker))
	buf.WriteByte(',')
	if len(mj.Ext) != 0 {
		buf.WriteString(`"ext":`)
		/* Falling back. type=openrtb.Extensions kind=map */
		err = buf.Encode(mj.Ext)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_AltNativeResponsebase = iota
	ffj_t_AltNativeResponseno_such_key

	ffj_t_AltNativeResponse_Ver

	ffj_t_AltNativeResponse_Assets

	ffj_t_AltNativeResponse_Link

	ffj_t_AltNativeResponse_Imptrackers

	ffj_t_AltNativeResponse_Jstracker

	ffj_t_AltNativeResponse_Ext
)

var ffj_key_AltNativeResponse_Ver = []byte("ver")

var ffj_key_AltNativeResponse_Assets = []byte("assets")

var ffj_key_AltNativeResponse_Link = []byte("link")

var ffj_key_AltNativeResponse_Imptrackers = []byte("imptrackers")

var ffj_key_AltNativeResponse_Jstracker = []byte("jstracker")

var ffj_key_AltNativeResponse_Ext = []byte("ext")

func (uj *AltNativeResponse) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *AltNativeResponse) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_AltNativeResponsebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_AltNativeResponseno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_AltNativeResponse_Assets, kn) {
						currentKey = ffj_t_AltNativeResponse_Assets
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffj_key_AltNativeResponse_Ext, kn) {
						currentKey = ffj_t_AltNativeResponse_Ext
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_AltNativeResponse_Imptrackers, kn) {
						currentKey = ffj_t_AltNativeResponse_Imptrackers
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'j':

					if bytes.Equal(ffj_key_AltNativeResponse_Jstracker, kn) {
						currentKey = ffj_t_AltNativeResponse_Jstracker
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_AltNativeResponse_Link, kn) {
						currentKey = ffj_t_AltNativeResponse_Link
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffj_key_AltNativeResponse_Ver, kn) {
						currentKey = ffj_t_AltNativeResponse_Ver
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_AltNativeResponse_Ext, kn) {
					currentKey = ffj_t_AltNativeResponse_Ext
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_AltNativeResponse_Jstracker, kn) {
					currentKey = ffj_t_AltNativeResponse_Jstracker
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_AltNativeResponse_Imptrackers, kn) {
					currentKey = ffj_t_AltNativeResponse_Imptrackers
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_AltNativeResponse_Link, kn) {
					currentKey = ffj_t_AltNativeResponse_Link
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_AltNativeResponse_Assets, kn) {
					currentKey = ffj_t_AltNativeResponse_Assets
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_AltNativeResponse_Ver, kn) {
					currentKey = ffj_t_AltNativeResponse_Ver
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_AltNativeResponseno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_AltNativeResponse_Ver:
					goto handle_Ver

				case ffj_t_AltNativeResponse_Assets:
					goto handle_Assets

				case ffj_t_AltNativeResponse_Link:
					goto handle_Link

				case ffj_t_AltNativeResponse_Imptrackers:
					goto handle_Imptrackers

				case ffj_t_AltNativeResponse_Jstracker:
					goto handle_Jstracker

				case ffj_t_AltNativeResponse_Ext:
					goto handle_Ext

				case ffj_t_AltNativeResponseno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Ver:

	/* handler: uj.Ver type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.Ver = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Assets:

	/* handler: uj.Assets type=[]openrtb.ResponseAsset kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Assets = nil
		} else {

			uj.Assets = make([]ResponseAsset, 0)

			wantVal := true

			for {

				var v ResponseAsset

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=openrtb.ResponseAsset kind=struct quoted=false*/

				{
					/* Falling back. type=openrtb.ResponseAsset kind=struct */
					tbuf, err := fs.CaptureField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}

					err = json.Unmarshal(tbuf, &v)
					if err != nil {
						return fs.WrapErr(err)
					}
				}

				uj.Assets = append(uj.Assets, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Link:

	/* handler: uj.Link type=openrtb.Link kind=struct quoted=false*/

	{
		/* Falling back. type=openrtb.Link kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Link)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Imptrackers:

	/* handler: uj.Imptrackers type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Imptrackers = nil
		} else {

			uj.Imptrackers = make([]string, 0)

			wantVal := true

			for {

				var v string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: v type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						v = string(string(outBuf))

					}
				}

				uj.Imptrackers = append(uj.Imptrackers, v)
				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Jstracker:

	/* handler: uj.Jstracker type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Jstracker = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: uj.Ext type=openrtb.Extensions kind=map quoted=false*/

	{
		/* Falling back. type=openrtb.Extensions kind=map */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Ext)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
